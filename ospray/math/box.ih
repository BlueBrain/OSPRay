// ======================================================================== //
// Copyright 2009-2016 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "vec.ih"

//! a 2-d float bounding box
struct box2f {
  vec2f lower;
  vec2f upper;
};

//! a 2-d integer bounding box
struct box2i {
  vec2i lower;
  vec2i upper;
};

//! a 3-d float bounding box
struct box3f { 
  vec3f lower;
  vec3f upper;
};

//! a 3-d int bounding box
struct box3i { 
  vec3i lower;
  vec3i upper;
};

//! a 3-d float bounding box with aligned vec3f coordinates
struct box3fa { 
  vec3fa lower;
  // int32 align0;
  vec3fa upper;
  // int32 align1;
};

//! a 4-d float bounding box
struct box4f { 
  vec4f lower;
  vec4f upper;
};


// -------------------------------------------------------
// box3f 'constructors'
// -------------------------------------------------------

#if 0
//! make a box with given lower and upper coordinates
inline uniform box3f make_box3f(const uniform vec3f lo, const uniform vec3f hi)
{ uniform box3f bb; bb.lower = lo; bb.upper = hi; return bb; }

//! make a box with given lower and upper coordinates
inline box3f make_box3f(const vec3f lo, const vec3f hi)
{ box3f bb; bb.lower = lo; bb.upper = hi; return bb; }

//! make a box with given lower and upper coordinates
inline box3fa make_box3f(const vec3fa lo, const vec3fa hi)
{ box3fa bb; bb.lower = lo; bb.upper = hi; return bb; }

//! make a 3f-box out of given 3fa-box
inline box3f make_box3f(const box3fa &other)
{ box3f bb; bb.lower = make_vec3f(other.lower); bb.upper = make_vec3f(other.upper); return bb; }

//! make a 3f-box out of given 3fa-box
inline uniform box3f make_box3f(const uniform box3fa &other)
{ uniform box3f bb; bb.lower = make_vec3f(other.lower); bb.upper = make_vec3f(other.upper); return bb; }


// -------------------------------------------------------
// box3fa 'constructors'
// -------------------------------------------------------

//! make a box with given lower and upper coordinates
inline uniform box3fa make_box3fa(const uniform box3f &b)
{ uniform box3fa bb; bb.lower = make_vec3fa(b.lower); bb.upper = make_vec3fa(b.upper); return bb; }

//! make a box with given lower and upper coordinates
inline box3fa make_box3fa(const vec3f lo, const vec3f hi)
{ box3fa bb; bb.lower = make_vec3fa(lo); bb.upper = make_vec3fa(hi); return bb; }

//! make a box with given lower and upper coordinates
inline box3fa make_box3fa(const vec3fa lo, const vec3fa hi)
{ box3fa bb; bb.lower = lo; bb.upper = hi; return bb; }

//! make a box with given lower and upper coordinates
inline uniform box3fa make_box3fa(const uniform vec3f lo, const uniform vec3f hi)
{ uniform box3fa bb; bb.lower = make_vec3fa(lo); bb.upper = make_vec3fa(hi); return bb; }

//! make a box with given lower and upper coordinates
inline uniform box3fa make_box3fa(uniform const vec3fa lo, uniform const vec3fa hi)
{ uniform box3fa bb; bb.lower = lo; bb.upper = hi; return bb; }
#else


#define MAKE_BOX_CONSTRUCTORS_uv_3T_fromVec3(univary,Tabb,otherT)       \
  inline univary box3##Tabb make_box3##Tabb(const univary vec3##otherT lower,  \
                                     const univary vec3##otherT upper) { \
    univary box3##Tabb bb;                                              \
      bb.lower.x = lower.x;                                             \
      bb.lower.y = lower.y;                                             \
      bb.lower.z = lower.z;                                             \
      bb.upper.x = upper.x;                                             \
      bb.upper.y = upper.y;                                             \
      bb.upper.z = upper.z;                                             \
      return bb;                                                        \
  }

#define MAKE_BOX_CONSTRUCTORS_uv_3T_fromBox3(univary,Tabb,otherT)       \
  inline univary box3##Tabb make_box3##Tabb(const univary box3##otherT other) { \
    univary box3##Tabb bb;                                              \
      bb.lower.x = other.lower.x;                                       \
      bb.lower.y = other.lower.y;                                       \
      bb.lower.z = other.lower.z;                                       \
      bb.upper.x = other.upper.x;                                       \
      bb.upper.y = other.upper.y;                                       \
      bb.upper.z = other.upper.z;                                       \
      return bb;                                                        \
  }

#define MAKE_BOX_CONSTRUCTORS_uv_3T(univary,Tabb) \
  MAKE_BOX_CONSTRUCTORS_uv_3T_fromVec3(univary,Tabb,f) \
  MAKE_BOX_CONSTRUCTORS_uv_3T_fromVec3(univary,Tabb,fa) \
  MAKE_BOX_CONSTRUCTORS_uv_3T_fromVec3(univary,Tabb,i) \
                                                       \
  MAKE_BOX_CONSTRUCTORS_uv_3T_fromBox3(univary,Tabb,f) \
  MAKE_BOX_CONSTRUCTORS_uv_3T_fromBox3(univary,Tabb,fa) \
  MAKE_BOX_CONSTRUCTORS_uv_3T_fromBox3(univary,Tabb,i) 

#define MAKE_BOX_CONSTRUCTORS_uv_3(univary)     \
  MAKE_BOX_CONSTRUCTORS_uv_3T(univary,i)        \
  MAKE_BOX_CONSTRUCTORS_uv_3T(univary,f)        \
  MAKE_BOX_CONSTRUCTORS_uv_3T(univary,fa)

#define MAKE_BOX_CONSTRUCTORS_uv(univary)       \
  MAKE_BOX_CONSTRUCTORS_uv_3(univary)           

MAKE_BOX_CONSTRUCTORS_uv(uniform);
MAKE_BOX_CONSTRUCTORS_uv(varying);   



#endif

//! print given box to stdout
void print_box(const uniform box3f &bbox);

//! print given box to stdout
void print_box(const uniform box3fa &bbox);
