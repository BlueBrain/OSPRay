// ======================================================================== //
// Copyright 2009-2016 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use self file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "BSDF.ih"
#include "GGXDistribution.ih"

struct MicrofacetConductor
{
  BSDF super;

  vec3f reflectance;
  vec3f eta;
  vec3f k;
  GGXDistribution distribution;
};

inline vec3f MicrofacetConductor_eval(const varying BSDF* uniform super,
                                      const vec3f& wo, const vec3f& wi, float& pdf)
{
  const varying MicrofacetConductor* uniform self = (const varying MicrofacetConductor* uniform)super;

  float cosThetaO = dot(wo, getN(super));
  float cosThetaI = dot(wi, getN(super));
  if (cosThetaO <= 0.0f || cosThetaI <= 0.0f)
  {
      pdf = 0.0f;
      return make_vec3f(0.0f);
  }

  vec3f wh = normalize(wi + wo);
  float cosThetaH = dot(wh, getN(super));
  float cosThetaOH = dot(wo, wh);
  float cosThetaIH = dot(wi, wh);

  vec3f F = fresnelConductor(cosThetaOH, self->eta, self->k);
  float whPdf;
  //float D = eval(self->distribution, cosThetaH, whPdf);
  float D = evalVisible(self->distribution, cosThetaH, cosThetaO, cosThetaOH, whPdf);
  float G = G2(self->distribution, cosThetaO, cosThetaI, cosThetaOH, cosThetaIH);

  pdf = whPdf * rcp(4.0f*abs(cosThetaOH));
  return F * (D * G * rcp(4.0f*cosThetaO));
}

inline vec3f MicrofacetConductor_sample(const varying BSDF* uniform super,
                                        const vec3f& wo, vec3f& wi, float& pdf, BSDFType& type,
                                        const vec2f& s, float ss)
{
  const varying MicrofacetConductor* uniform self = (const varying MicrofacetConductor* uniform)super;

  float cosThetaO = dot(wo, getN(super));
  if (cosThetaO <= 0.0f) return make_vec3f(0.0f);

  float whPdf;
  //vec3f wh = getFrame(super) * sample(self->distribution, whPdf, s);
  vec3f wh = getFrame(super) * sampleVisible(self->distribution, transposed(getFrame(super)) * wo, whPdf, s);

  wi = reflect(wo, wh);
  float cosThetaI = dot(wi, getN(super));
  if (cosThetaI <= 0.0f) return make_vec3f(0.0f);
  //float cosThetaH = dot(wh, getN(super));
  float cosThetaOH = dot(wo, wh);
  float cosThetaIH = dot(wi, wh);

  vec3f F = fresnelConductor(cosThetaOH, self->eta, self->k);
  float G = G2(self->distribution, cosThetaO, cosThetaI, cosThetaOH, cosThetaIH);

  type = BSDF_GLOSSY_REFLECTION;
  pdf = whPdf * rcp(4.0f*abs(cosThetaOH));
  //return F * (G * abs(cosThetaOH * rcp(cosThetaO*cosThetaH)));
  return F * (G * rcp_safe(G1(self->distribution, cosThetaO, cosThetaOH)));
}

inline void MicrofacetConductor_Constructor(varying MicrofacetConductor* uniform self, const varying linear3f* uniform frame,
                                            vec3f reflectance, vec3f eta, vec3f k, float roughness)
{
  BSDF_Constructor(&self->super, BSDF_GLOSSY_REFLECTION,
                   MicrofacetConductor_eval, MicrofacetConductor_sample,
                   frame);

  self->reflectance = reflectance;
  self->eta = eta;
  self->k = k;
  self->distribution = make_GGXDistribution(roughnessToAlpha(roughness));
}

inline varying BSDF* uniform MicrofacetConductor_create(uniform ShadingContext* uniform ctx, const varying linear3f* uniform frame,
                                                        vec3f reflectance, vec3f eta, vec3f k, float roughness)
{
  varying MicrofacetConductor* uniform self = (varying MicrofacetConductor* uniform)ShadingContext_alloc(ctx, sizeof(MicrofacetConductor));
  MicrofacetConductor_Constructor(self, frame, reflectance, eta, k, roughness);
  return &self->super;
}
