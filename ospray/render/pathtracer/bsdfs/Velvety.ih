// ======================================================================== //
// Copyright 2009-2016 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "BSDF.ih"

struct Velvety
{
  BSDF super;

  /*! The reflectance parameter. The vale 0 means no reflection,
   *  and 1 means full reflection. */
  vec3f R;

  /*! The falloff of horizon scattering. 0 no falloff,
   *  and inf means maximum falloff. */
  float f;
};

inline vec3f Velvety_eval(const varying BSDF* uniform super,
                          const vec3f& wo, const vec3f& wi, float& pdf)
{
  const varying Velvety* uniform self = (const varying Velvety* uniform)super;

  const float cosThetaO = clamp(dot(wo,getN(super)));
  const float cosThetaI = clamp(dot(wi,getN(super)));
  const float sinThetaO = sqrt(1.0f - cosThetaO * cosThetaO);
  const float horizonScatter = pow(sinThetaO, self->f);
  pdf = cosineSampleHemispherePDF(cosThetaI);
  return mul(horizonScatter * cosThetaI * one_over_pi, self->R);
}

inline vec3f Velvety_sample(const varying BSDF* uniform super,
                            const vec3f& wo, vec3f& wi, float& pdf, BSDFType& type,
                            const vec2f& s, float ss)
{
  const varying Velvety* uniform self = (const varying Velvety* uniform)super;

  const vec3f localDir = cosineSampleHemisphere(s);
  wi = getFrame(super) * localDir;
  type = BSDF_DIFFUSE_REFLECTION;
  return Velvety_eval(super, wo, wi, pdf) * rcp(pdf);
}

inline void Velvety_Constructor(varying Velvety* uniform self, const varying linear3f* uniform frame,
                                vec3f R, float f)
{
  BSDF_Constructor(&self->super, BSDF_DIFFUSE_REFLECTION,
                   Velvety_eval, Velvety_sample,
                   frame);

  self->R = R;
  self->f = f;
}

inline varying BSDF* uniform Velvety_create(uniform ShadingContext* uniform ctx, const varying linear3f* uniform frame,
                                            vec3f R, float f)
{
  varying Velvety* uniform self = (varying Velvety* uniform)ShadingContext_alloc(ctx, sizeof(Velvety));
  Velvety_Constructor(self, frame, R, f);
  return &self->super;
}
